{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/InputField.tsx\";\nimport { useField } from \"formik\";\nimport React from \"react\";\nimport { TextInput } from \"react-native-paper\";\nimport * as yup from \"yup\";\nexport var InputField = function InputField(_ref) {\n  var field = _ref.field,\n      props = _objectWithoutProperties(_ref, [\"field\"]);\n\n  return React.createElement(TextInput, _extends({}, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }\n  }));\n};\nexport var MyTextField = function MyTextField(_ref2) {\n  var label = _ref2.label,\n      props = _objectWithoutProperties(_ref2, [\"label\"]);\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  return React.createElement(TextInput, _extends({\n    label: label\n  }, field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }\n  }));\n};\nexport var validationSchema = yup.object({\n  firstName: yup.string().required().min(2),\n  pets: yup.array().of(yup.object({\n    name: yup.string().required()\n  }))\n});","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/InputField.tsx"],"names":["useField","React","TextInput","yup","InputField","field","props","MyTextField","label","meta","validationSchema","object","firstName","string","required","min","pets","array","of","name"],"mappings":";;;;AAAA,SAAsCA,QAAtC,QAAsD,QAAtD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAQA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAqC;AAAA,MAAlCC,KAAkC,QAAlCA,KAAkC;AAAA,MAAxBC,KAAwB;;AAC7D,SAAO,oBAAC,SAAD,eAAeD,KAAf,EAA0BC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAFM;AAIP,OAAO,IAAMC,WAAgD,GAAG,SAAnDA,WAAmD,QAG1D;AAAA,MAFJC,KAEI,SAFJA,KAEI;AAAA,MADDF,KACC;;AAAA,kBACkBN,QAAQ,CAACM,KAAD,CAD1B;AAAA;AAAA,MACGD,KADH;AAAA,MACUI,IADV;;AAGJ,SAAO,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAED;AAAlB,KAA8BH,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAPM;AASP,OAAO,IAAMK,gBAAgB,GAAGP,GAAG,CAACQ,MAAJ,CAAW;AACzCC,EAAAA,SAAS,EAAET,GAAG,CAACU,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,CAD8B;AAEzCC,EAAAA,IAAI,EAAEb,GAAG,CAACc,KAAJ,GAAYC,EAAZ,CACJf,GAAG,CAACQ,MAAJ,CAAW;AACTQ,IAAAA,IAAI,EAAEhB,GAAG,CAACU,MAAJ,GAAaC,QAAb;AADG,GAAX,CADI;AAFmC,CAAX,CAAzB","sourcesContent":["import { FieldProps, FieldAttributes, useField } from \"formik\";\nimport React from \"react\";\nimport { TextInput } from \"react-native-paper\";\n\nimport * as yup from \"yup\";\n\ninterface InputFieldProps {}\n\n// export const InputField: React.FC<InputFieldProps> = ({}) => {\n//         return ();\n// }\n\nexport const InputField = ({ field, ...props }: FieldProps) => {\n  return <TextInput {...field} {...props} />;\n};\n\nexport const MyTextField: React.FC<FieldAttributes<{}> & any> = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  //   const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return <TextInput label={label} {...(field as any)} />;\n};\n\nexport const validationSchema = yup.object({\n  firstName: yup.string().required().min(2),\n  pets: yup.array().of(\n    yup.object({\n      name: yup.string().required(),\n    })\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}