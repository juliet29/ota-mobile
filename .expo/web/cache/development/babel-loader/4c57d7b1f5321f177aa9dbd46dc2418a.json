{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx\";\nimport { Formik, Field } from \"Formik\";\nimport { ErrorMessage } from \"formik\";\nimport React from \"react\";\nimport { Button, TextInput } from \"react-native-paper\";\nimport { useRegisterMutation } from \"../generated/apolloComponents\";\nimport { LineBreak, StyledColumnView, Wrapper } from \"../global-ui/ReusedUI\";\nimport { InputField } from \"./InputField\";\nexport var RegisterView = function RegisterView(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 2),\n      registerUser = _useRegisterMutation2[0],\n      _useRegisterMutation3 = _useRegisterMutation2[1],\n      loading = _useRegisterMutation3.loading,\n      error = _useRegisterMutation3.error;\n\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n\n  function submitRegisterUser(formData) {\n    var response, errors;\n    return _regeneratorRuntime.async(function submitRegisterUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(registerUser({\n              variables: {\n                data: {\n                  email: formData.email,\n                  username: \"xcfvgbhjnkmfghjk\",\n                  password: \"dfghjklcvbnm,\"\n                }\n              }\n            }));\n\n          case 3:\n            response = _context.sent;\n            console.log(response);\n            _context.next = 12;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            errors = {};\n\n            _context.t0.graphQLErrors[0].extensions.exception.validationErrors.forEach(function (validationErr) {\n              Object.values(validationErr.constraints).forEach(function (message) {\n                errors[validationErr.property] = message;\n              });\n            });\n\n            console.log(errors);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }\n\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\"\n    },\n    onSubmit: function onSubmit(values) {\n      return submitRegisterUser(values);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        values = _ref2.values;\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, React.createElement(StyledColumnView, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      label: \"email\",\n      onChangeText: handleChange(\"email\"),\n      onBlur: handleBlur(\"email\"),\n      value: values.email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      name: \"username\",\n      label: \"username\",\n      component: InputField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }), React.createElement(ErrorMessage, {\n      name: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      name: \"password\",\n      label: \"password\",\n      component: InputField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    })), React.createElement(LineBreak, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }), React.createElement(Button, {\n      onPress: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, \"Submit\"));\n  });\n};","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx"],"names":["Formik","Field","ErrorMessage","React","Button","TextInput","useRegisterMutation","LineBreak","StyledColumnView","Wrapper","InputField","RegisterView","navigation","route","registerUser","loading","error","submitRegisterUser","formData","variables","data","email","username","password","response","console","log","errors","graphQLErrors","extensions","exception","validationErrors","forEach","validationErr","Object","values","constraints","message","property","handleChange","handleBlur","handleSubmit"],"mappings":"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","sourcesContent":["import { Formik, Field } from \"Formik\";\nimport { ErrorMessage } from \"formik\";\nimport React from \"react\";\nimport { Button, TextInput } from \"react-native-paper\";\nimport { useRegisterMutation } from \"../generated/apolloComponents\";\nimport { LineBreak, StyledColumnView, Wrapper } from \"../global-ui/ReusedUI\";\nimport { AuthNavProps } from \"../navigation/auth/AuthParamList\";\nimport { InputField } from \"./InputField\";\n\ninterface RegisterViewProps {}\n\nexport const RegisterView: React.FC<AuthNavProps<\"Register\">> = ({\n  navigation,\n  route,\n}) => {\n  // register mutation\n  const [registerUser, { loading, error }] = useRegisterMutation();\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  async function submitRegisterUser(formData: any) {\n    try {\n      const response = await registerUser({\n        variables: {\n          data: {\n            // username: formData.username,\n            // password: formData.password,\n            email: formData.email,\n            username: \"xcfvgbhjnkmfghjk\",\n            password: \"dfghjklcvbnm,\",\n          },\n        },\n      });\n      console.log(response);\n    } catch (err) {\n      // console.log(\"err: \", error.graphQLErrors);\n      const errors: { [key: string]: string } = {};\n      err.graphQLErrors[0].extensions.exception.validationErrors.forEach(\n        (validationErr: any) => {\n          Object.values(validationErr.constraints).forEach((message: any) => {\n            errors[validationErr.property] = message;\n          });\n        }\n      );\n      console.log(errors);\n    }\n  }\n\n  return (\n    <Formik\n      initialValues={{ email: \"\" }}\n      onSubmit={(values) => submitRegisterUser(values)}>\n      {({ handleChange, handleBlur, handleSubmit, values }) => (\n        <Wrapper>\n          <StyledColumnView>\n            <TextInput\n              label=\"email\"\n              onChangeText={handleChange(\"email\")}\n              onBlur={handleBlur(\"email\")}\n              value={values.email}\n            />\n\n            <Field name=\"username\" label=\"username\" component={InputField} />\n            <ErrorMessage name=\"username\" />\n            {/* TODO figure out password hiding  */}\n            <Field name=\"password\" label=\"password\" component={InputField} />\n          </StyledColumnView>\n          <LineBreak />\n\n          <Button onPress={handleSubmit as any}>Submit</Button>\n        </Wrapper>\n      )}\n    </Formik>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}