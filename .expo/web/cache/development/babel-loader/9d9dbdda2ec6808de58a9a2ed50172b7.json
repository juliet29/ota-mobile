{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/generated-components/apolloComponents.tsx\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  mutation Register($data: RegisterInput!) {\\n    register(data: $data)\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  mutation Login($email: String!, $password: String!) {\\n    login(email: $email, password: $password) {\\n      id\\n      username\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport * as ApolloReactComponents from \"@apollo/react-components\";\nimport * as ApolloReactHooks from \"@apollo/react-hooks\";\nexport var LoginDocument = gql(_templateObject());\nexport var LoginComponent = function LoginComponent(props) {\n  return React.createElement(ApolloReactComponents.Mutation, _extends({\n    mutation: LoginDocument\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 3\n    }\n  }));\n};\nexport function useLoginMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LoginDocument, baseOptions);\n}\nexport var RegisterDocument = gql(_templateObject2());\nexport var RegisterComponent = function RegisterComponent(props) {\n  return React.createElement(ApolloReactComponents.Mutation, _extends({\n    mutation: RegisterDocument\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 3\n    }\n  }));\n};\nexport function useRegisterMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(RegisterDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/generated-components/apolloComponents.tsx"],"names":["gql","React","ApolloReactComponents","ApolloReactHooks","LoginDocument","LoginComponent","props","useLoginMutation","baseOptions","useMutation","RegisterDocument","RegisterComponent","useRegisterMutation"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,qBAAZ,MAAuC,0BAAvC;AACA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AA0GA,OAAO,IAAMC,aAAa,GAAGJ,GAAH,mBAAnB;AAqBP,OAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;AAAA,SAC5B,oBAAC,qBAAD,CAAuB,QAAvB;AACE,IAAA,QAAQ,EAAEF;AADZ,KAEME,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD4B;AAAA,CAAvB;AAyBP,OAAO,SAASC,gBAAT,CACLC,WADK,EAKL;AACA,SAAOL,gBAAgB,CAACM,WAAjB,CACLL,aADK,EAELI,WAFK,CAAP;AAID;AASD,OAAO,IAAME,gBAAgB,GAAGV,GAAH,oBAAtB;AAiBP,OAAO,IAAMW,iBAAiB,GAAG,SAApBA,iBAAoB,CAACL,KAAD;AAAA,SAC/B,oBAAC,qBAAD,CAAuB,QAAvB;AACE,IAAA,QAAQ,EAAEI;AADZ,KAEMJ,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD+B;AAAA,CAA1B;AAwBP,OAAO,SAASM,mBAAT,CACLJ,WADK,EAKL;AACA,SAAOL,gBAAgB,CAACM,WAAjB,CAGLC,gBAHK,EAGaF,WAHb,CAAP;AAID","sourcesContent":["import gql from \"graphql-tag\";\nimport * as ApolloReactCommon from \"@apollo/react-common\";\nimport * as React from \"react\";\nimport * as ApolloReactComponents from \"@apollo/react-components\";\nimport * as ApolloReactHooks from \"@apollo/react-hooks\";\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: \"Query\";\n  getCurrentUser?: Maybe<User>;\n  hello: Scalars[\"String\"];\n  getPosts: Array<Post>;\n};\n\nexport type User = {\n  __typename?: \"User\";\n  id: Scalars[\"ID\"];\n  username: Scalars[\"String\"];\n  email: Scalars[\"String\"];\n};\n\nexport type Post = {\n  __typename?: \"Post\";\n  id: Scalars[\"ID\"];\n  text: Scalars[\"String\"];\n  link?: Maybe<Scalars[\"String\"]>;\n  timeSubmitted: Scalars[\"DateTime\"];\n  user: User;\n};\n\nexport type Mutation = {\n  __typename?: \"Mutation\";\n  changePassword?: Maybe<User>;\n  confirmUser: Scalars[\"Boolean\"];\n  forgotPassword: Scalars[\"Boolean\"];\n  login?: Maybe<User>;\n  logout: Scalars[\"Boolean\"];\n  register: Scalars[\"Boolean\"];\n  createPost: Scalars[\"Boolean\"];\n};\n\nexport type MutationChangePasswordArgs = {\n  data: ChangePassowrdInput;\n};\n\nexport type MutationConfirmUserArgs = {\n  token: Scalars[\"String\"];\n};\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars[\"String\"];\n};\n\nexport type MutationLoginArgs = {\n  password: Scalars[\"String\"];\n  email: Scalars[\"String\"];\n};\n\nexport type MutationRegisterArgs = {\n  data: RegisterInput;\n};\n\nexport type MutationCreatePostArgs = {\n  link: Scalars[\"String\"];\n  text: Scalars[\"String\"];\n};\n\nexport type ChangePassowrdInput = {\n  password: Scalars[\"String\"];\n  token: Scalars[\"String\"];\n};\n\nexport type RegisterInput = {\n  password: Scalars[\"String\"];\n  username: Scalars[\"String\"];\n  email: Scalars[\"String\"];\n};\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars[\"String\"];\n  password: Scalars[\"String\"];\n}>;\n\nexport type LoginMutation = { __typename?: \"Mutation\" } & {\n  login?: Maybe<\n    { __typename?: \"User\" } & Pick<User, \"id\" | \"username\" | \"email\">\n  >;\n};\n\nexport type RegisterMutationVariables = Exact<{\n  data: RegisterInput;\n}>;\n\nexport type RegisterMutation = { __typename?: \"Mutation\" } & Pick<\n  Mutation,\n  \"register\"\n>;\n\nexport const LoginDocument = gql`\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      id\n      username\n      email\n    }\n  }\n`;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<\n  LoginMutation,\n  LoginMutationVariables\n>;\nexport type LoginComponentProps = Omit<\n  ApolloReactComponents.MutationComponentOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >,\n  \"mutation\"\n>;\n\nexport const LoginComponent = (props: LoginComponentProps) => (\n  <ApolloReactComponents.Mutation<LoginMutation, LoginMutationVariables>\n    mutation={LoginDocument}\n    {...props}\n  />\n);\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(\n  baseOptions?: ApolloReactHooks.MutationHookOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >\n) {\n  return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(\n    LoginDocument,\n    baseOptions\n  );\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<\n  LoginMutation\n>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<\n  LoginMutation,\n  LoginMutationVariables\n>;\nexport const RegisterDocument = gql`\n  mutation Register($data: RegisterInput!) {\n    register(data: $data)\n  }\n`;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<\n  RegisterMutation,\n  RegisterMutationVariables\n>;\nexport type RegisterComponentProps = Omit<\n  ApolloReactComponents.MutationComponentOptions<\n    RegisterMutation,\n    RegisterMutationVariables\n  >,\n  \"mutation\"\n>;\n\nexport const RegisterComponent = (props: RegisterComponentProps) => (\n  <ApolloReactComponents.Mutation<RegisterMutation, RegisterMutationVariables>\n    mutation={RegisterDocument}\n    {...props}\n  />\n);\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useRegisterMutation(\n  baseOptions?: ApolloReactHooks.MutationHookOptions<\n    RegisterMutation,\n    RegisterMutationVariables\n  >\n) {\n  return ApolloReactHooks.useMutation<\n    RegisterMutation,\n    RegisterMutationVariables\n  >(RegisterDocument, baseOptions);\n}\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<\n  RegisterMutation\n>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<\n  RegisterMutation,\n  RegisterMutationVariables\n>;\n"]},"metadata":{},"sourceType":"module"}