{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx\";\nimport React from \"react\";\nimport { Button } from \"react-native-paper\";\nimport { Wrapper } from \"../global-ui/ReusedUI\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { REGISTER } from \"../graphql/user/mutations/register\";\nexport var RegisterView = function RegisterView(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var testVar = {\n    data: {\n      username: \"hiwasgood\",\n      password: \"password\",\n      email: \"fake@email.com\"\n    }\n  };\n\n  var _useMutation = useMutation(REGISTER),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      registerUser = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n\n  function createNewUser() {\n    return _regeneratorRuntime.async(function createNewUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(registerUser({\n              variables: {\n                testVar: testVar\n              }\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    onPress: createNewUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"TEST\"));\n};","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx"],"names":["React","Button","Wrapper","useMutation","REGISTER","RegisterView","navigation","route","testVar","data","username","password","email","registerUser","loading","error","createNewUser","variables"],"mappings":";;;AACA,OAAOA,KAAP,MAAiC,OAAjC;AACA,SAASC,MAAT,QAAkC,oBAAlC;AACA,SAAsCC,OAAtC;AAOA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,QAAT;AAIA,OAAO,IAAMC,YAAgD,GAAG,SAAnDA,YAAmD,OAG1D;AAAA,MAFJC,UAEI,QAFJA,UAEI;AAAA,MADJC,KACI,QADJA,KACI;AAIJ,MAAMC,OAAO,GAAG;AACdC,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,WADN;AAEJC,MAAAA,QAAQ,EAAE,UAFN;AAGJC,MAAAA,KAAK,EAAE;AAHH;AADQ,GAAhB;;AAJI,qBAauCT,WAAW,CAACC,QAAD,CAblD;AAAA;AAAA,MAaGS,YAbH;AAAA;AAAA,MAamBC,OAbnB,kBAamBA,OAbnB;AAAA,MAa4BC,KAb5B,kBAa4BA,KAb5B;;AAcJ,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;;AAyBX,WAAeC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQH,YAAY,CAAC;AAAEI,cAAAA,SAAS,EAAE;AAAET,gBAAAA,OAAO,EAAPA;AAAF;AAAb,aAAD,CADpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEQ,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AA+BD,CA9EM","sourcesContent":["import { gql } from \"apollo-boost\";\nimport React, { useEffect } from \"react\";\nimport { Button, TextInput } from \"react-native-paper\";\nimport { LineBreak, StyledColumnView, Wrapper } from \"../global-ui/ReusedUI\";\nimport { AuthNavProps } from \"../navigation/auth/AuthParamList\";\nimport {\n  useRegisterMutation,\n  RegisterInput,\n} from \"../generated/apolloComponents\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { REGISTER } from \"../graphql/user/mutations/register\";\n\ninterface RegisterViewProps {}\n\nexport const RegisterView: React.FC<AuthNavProps<\"Register\">> = ({\n  navigation,\n  route,\n}) => {\n  // form stuff\n  // const { register, setValue, handleSubmit, errors } = useForm();\n\n  const testVar = {\n    data: {\n      username: \"hiwasgood\",\n      password: \"password\",\n      email: \"fake@email.com\",\n    },\n  };\n\n  // register mutation\n  const [registerUser, { loading, error }] = useMutation(REGISTER);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  // TODO define what happens on submit\n  // const onSubmit = (formData: any) => {\n  //   console.log(\"submitted!\");\n  //   // registerUser({\n  //   //   variables: {\n  //   //     data: {\n  //   //       username: formData.username,\n  //   //       password: formData.password,\n  //   //       email: formData.email,\n  //   //     },\n  //   //   },\n  //   // });\n  //   // actually log in so can get a cookie :)\n  //   // navigation.navigate(\"Login\");\n  // };\n\n  // how the form updates + validation\n  // useEffect(() => {\n  //   register({ name: \"username\" });\n  //   register({ name: \"email\" });\n  //   register({ name: \"password\" });\n  //   register({ name: \"passwordConfirm\" });\n  // }, [register]);\n  async function createNewUser() {\n    await registerUser({ variables: { testVar } });\n  }\n\n  return (\n    <Wrapper>\n      <Button onPress={createNewUser}>TEST</Button>\n      {/* <StyledColumnView>\n        <TextInput\n          label=\"Username\"\n          mode=\"outlined\"\n          onChangeText={(text) => setValue(\"username\", text)}\n        />\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          onChangeText={(text) => setValue(\"email\", text)}\n        />\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          onChangeText={(text) => setValue(\"password\", text)}\n        />\n        <TextInput\n          label=\"Confirm Password\"\n          mode=\"outlined\"\n          onChangeText={(text) => setValue(\"passwordConfirm\", text)}\n        />\n        <LineBreak />\n        <Button mode=\"contained\" onPress={handleSubmit(onSubmit)}>\n          SIGN UP\n        </Button>\n      </StyledColumnView> */}\n    </Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}