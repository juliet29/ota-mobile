{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx\";\nimport React, { useEffect } from \"react\";\nimport { Button, TextInput } from \"react-native-paper\";\nimport { LineBreak, StyledColumnView, Wrapper } from \"../global-ui/ReusedUI\";\nimport { useRegisterMutation } from \"../generated/apolloComponents\";\nimport { useForm } from \"react-hook-form\";\nexport var RegisterView = function RegisterView(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      setValue = _useForm.setValue,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors;\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 2),\n      registerUser = _useRegisterMutation2[0],\n      _useRegisterMutation3 = _useRegisterMutation2[1],\n      loading = _useRegisterMutation3.loading,\n      error = _useRegisterMutation3.error;\n\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  useEffect(function () {\n    register({\n      name: \"username\"\n    });\n    register({\n      name: \"email\"\n    });\n    register({\n      name: \"password\"\n    });\n    register({\n      name: \"passwordConfirm\"\n    });\n  }, [register]);\n\n  function createNewUser(formData) {\n    var res;\n    return _regeneratorRuntime.async(function createNewUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(registerUser({\n              variables: {\n                data: {\n                  username: formData.username,\n                  password: formData.password,\n                  email: formData.email\n                }\n              }\n            }));\n\n          case 2:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, React.createElement(StyledColumnView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    label: \"Username\",\n    mode: \"outlined\",\n    onChangeText: function onChangeText(text) {\n      return setValue(\"username\", text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    label: \"Email\",\n    mode: \"outlined\",\n    onChangeText: function onChangeText(text) {\n      return setValue(\"email\", text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    label: \"Password\",\n    mode: \"outlined\",\n    onChangeText: function onChangeText(text) {\n      return setValue(\"password\", text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), React.createElement(LineBreak, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    mode: \"contained\",\n    onPress: handleSubmit(createNewUser),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"SIGN UP\")));\n};","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx"],"names":["React","useEffect","Button","TextInput","LineBreak","StyledColumnView","Wrapper","useRegisterMutation","useForm","RegisterView","navigation","route","register","setValue","handleSubmit","errors","registerUser","loading","error","name","createNewUser","formData","variables","data","username","password","email","res","text"],"mappings":"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","sourcesContent":["import { gql } from \"apollo-boost\";\nimport React, { useEffect } from \"react\";\nimport { Button, TextInput } from \"react-native-paper\";\nimport { LineBreak, StyledColumnView, Wrapper } from \"../global-ui/ReusedUI\";\nimport { AuthNavProps } from \"../navigation/auth/AuthParamList\";\nimport {\n  useRegisterMutation,\n  RegisterInput,\n} from \"../generated/apolloComponents\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { REGISTER } from \"../graphql/user/mutations/register\";\n\ninterface RegisterViewProps {}\n\nexport const RegisterView: React.FC<AuthNavProps<\"Register\">> = ({\n  navigation,\n  route,\n}) => {\n  // form stuff\n  const { register, setValue, handleSubmit, errors } = useForm();\n\n  // const testVar = {\n  //   data: {\n  //     username: \"hiwasgood\",\n  //     password: \"password\",\n  //     email: \"fake@email.com\",\n  //   },\n  // };\n\n  // register mutation\n  const [registerUser, { loading, error }] = useRegisterMutation();\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  // TODO define what happens on submit\n  // const onSubmit = (formData: any) => {\n  //   console.log(\"submitted!\");\n  //   // registerUser({\n  //   //   variables: {\n  //   //     data: {\n  //   //       username: formData.username,\n  //   //       password: formData.password,\n  //   //       email: formData.email,\n  //   //     },\n  //   //   },\n  //   // });\n  //   // actually log in so can get a cookie :)\n  //   // navigation.navigate(\"Login\");\n  // };\n\n  // how the form updates + validation\n  useEffect(() => {\n    register({ name: \"username\" });\n    register({ name: \"email\" });\n    register({ name: \"password\" });\n    register({ name: \"passwordConfirm\" });\n  }, [register]);\n\n  async function createNewUser(formData: RegisterInput) {\n    const res = await registerUser({\n      variables: {\n        data: {\n          username: formData.username,\n          password: formData.password,\n          email: formData.email,\n        },\n      },\n    });\n    return res;\n  }\n\n  return (\n    <Wrapper>\n      {/* <Button onPress={createNewUser}>TEST</Button> */}\n      <StyledColumnView>\n        <TextInput\n          label=\"Username\"\n          mode=\"outlined\"\n          onChangeText={(text) => setValue(\"username\", text)}\n        />\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          onChangeText={(text) => setValue(\"email\", text)}\n        />\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          onChangeText={(text) => setValue(\"password\", text)}\n        />\n        {/* <TextInput\n          label=\"Confirm Password\"\n          mode=\"outlined\"\n          onChangeText={(text) => setValue(\"passwordConfirm\", text)}\n        /> */}\n        <LineBreak />\n        <Button mode=\"contained\" onPress={handleSubmit(createNewUser)}>\n          SIGN UP\n        </Button>\n      </StyledColumnView>\n    </Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}