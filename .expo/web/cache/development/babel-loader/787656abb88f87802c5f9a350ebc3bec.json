{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx\";\nimport { Formik, Field } from \"formik\";\nimport React from \"react\";\nimport { Button, TextInput } from \"react-native-paper\";\nimport { useRegisterMutation } from \"../generated/apolloComponents\";\nimport { LineBreak, StyledColumnView, Wrapper } from \"../global-ui/ReusedUI\";\nimport * as Yup from \"yup\";\nvar SignupSchema = Yup.object().shape({\n  username: Yup.string().min(2, \"Too Short!\").max(70, \"Too Long!\").required(\"Required\")\n});\nexport var RegisterView = function RegisterView(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 2),\n      registerUser = _useRegisterMutation2[0],\n      _useRegisterMutation3 = _useRegisterMutation2[1],\n      loading = _useRegisterMutation3.loading,\n      error = _useRegisterMutation3.error;\n\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n\n  function submitRegisterUser(formData) {\n    var response;\n    return _regeneratorRuntime.async(function submitRegisterUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(registerUser({\n              variables: {\n                data: {\n                  email: formData.email,\n                  username: \"xcfvgbhjnkmfghjk\",\n                  password: \"dfghjklcvbnm,\"\n                }\n              }\n            }));\n\n          case 3:\n            response = _context.sent;\n            console.log(response);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }\n\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\"\n    },\n    onSubmit: function onSubmit(values) {\n      return submitRegisterUser(values);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        values = _ref2.values;\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, React.createElement(StyledColumnView, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, React.createElement(Field, {\n      name: \"username\",\n      label: \"username\",\n      component: TextInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    })), React.createElement(LineBreak, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }), React.createElement(Button, {\n      onPress: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, \"Submit\"));\n  });\n};","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx"],"names":["Formik","Field","React","Button","TextInput","useRegisterMutation","LineBreak","StyledColumnView","Wrapper","Yup","SignupSchema","object","shape","username","string","min","max","required","RegisterView","navigation","route","registerUser","loading","error","submitRegisterUser","formData","variables","data","email","password","response","console","log","values","handleChange","handleBlur","handleSubmit"],"mappings":";;;AAAA,SAAuBA,MAAvB,EAA+BC,KAA/B,QAA4C,QAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,oBAAlC;AACA,SAASC,mBAAT;AACA,SAASC,SAAT,EAAoBC,gBAApB,EAAsCC,OAAtC;AAGA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAIA,IAAMC,YAAY,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AACtCC,EAAAA,QAAQ,EAAEJ,GAAG,CAACK,MAAJ,GACPC,GADO,CACH,CADG,EACA,YADA,EAEPC,GAFO,CAEH,EAFG,EAEC,WAFD,EAGPC,QAHO,CAGE,UAHF;AAD4B,CAAnB,CAArB;AAOA,OAAO,IAAMC,YAAgD,GAAG,SAAnDA,YAAmD,OAG1D;AAAA,MAFJC,UAEI,QAFJA,UAEI;AAAA,MADJC,KACI,QADJA,KACI;;AAAA,6BAEuCf,mBAAmB,EAF1D;AAAA;AAAA,MAEGgB,YAFH;AAAA;AAAA,MAEmBC,OAFnB,yBAEmBA,OAFnB;AAAA,MAE4BC,KAF5B,yBAE4BA,KAF5B;;AAGJ,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;;AAEX,WAAeC,kBAAf,CAAkCC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAE2BJ,YAAY,CAAC;AAClCK,cAAAA,SAAS,EAAE;AACTC,gBAAAA,IAAI,EAAE;AAGJC,kBAAAA,KAAK,EAAEH,QAAQ,CAACG,KAHZ;AAIJf,kBAAAA,QAAQ,EAAE,kBAJN;AAKJgB,kBAAAA,QAAQ,EAAE;AALN;AADG;AADuB,aAAD,CAFvC;;AAAA;AAEUC,YAAAA,QAFV;AAaIC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAbJ;AAAA;;AAAA;AAAA;AAAA;AAgBIC,YAAAA,OAAO,CAACC,GAAR;;AAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEJ,MAAAA,KAAK,EAAE;AAAT,KADjB;AAEE,IAAA,QAAQ,EAAE,kBAACK,MAAD;AAAA,aAAYT,kBAAkB,CAACS,MAAD,CAA9B;AAAA,KAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,QAAiBC,UAAjB,SAAiBA,UAAjB;AAAA,QAA6BC,YAA7B,SAA6BA,YAA7B;AAAA,QAA2CH,MAA3C,SAA2CA,MAA3C;AAAA,WACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,KAAK,EAAC,UAA7B;AAAwC,MAAA,SAAS,EAAE7B,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF,EAcE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdF,EAgBE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEgC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBF,CADD;AAAA,GALH,CADF;AA4BD,CAzDM","sourcesContent":["import { ErrorMessage, Formik, Field } from \"formik\";\nimport React from \"react\";\nimport { Button, TextInput } from \"react-native-paper\";\nimport { useRegisterMutation } from \"../generated/apolloComponents\";\nimport { LineBreak, StyledColumnView, Wrapper } from \"../global-ui/ReusedUI\";\nimport { AuthNavProps } from \"../navigation/auth/AuthParamList\";\nimport { InputField } from \"./InputField\";\nimport * as Yup from \"yup\";\n\ninterface RegisterViewProps {}\n\nconst SignupSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(70, \"Too Long!\")\n    .required(\"Required\"),\n});\n\nexport const RegisterView: React.FC<AuthNavProps<\"Register\">> = ({\n  navigation,\n  route,\n}) => {\n  // register mutation\n  const [registerUser, { loading, error }] = useRegisterMutation();\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  async function submitRegisterUser(formData: any) {\n    try {\n      const response = await registerUser({\n        variables: {\n          data: {\n            // username: formData.username,\n            // password: formData.password,\n            email: formData.email,\n            username: \"xcfvgbhjnkmfghjk\",\n            password: \"dfghjklcvbnm,\",\n          },\n        },\n      });\n      console.log(response);\n    } catch (err) {\n      // TODO  handle sever errors at top level\n      console.log(err);\n    }\n  }\n\n  return (\n    <Formik\n      initialValues={{ email: \"\" }}\n      onSubmit={(values) => submitRegisterUser(values)}\n      // validationSchema={SignupSchema}\n    >\n      {({ handleChange, handleBlur, handleSubmit, values }) => (\n        <Wrapper>\n          <StyledColumnView>\n            {/* <TextInput\n              label=\"email\"\n              onChangeText={handleChange(\"email\")}\n              onBlur={handleBlur(\"email\")}\n              value={values.email}\n            /> */}\n\n            <Field name=\"username\" label=\"username\" component={TextInput} />\n            {/* <ErrorMessage name=\"username\" /> */}\n            {/* TODO figure out password hiding  */}\n            {/* <Field name=\"password\" label=\"password\" component={InputField} /> */}\n          </StyledColumnView>\n          <LineBreak />\n\n          <Button onPress={handleSubmit as any}>Submit</Button>\n        </Wrapper>\n      )}\n    </Formik>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}