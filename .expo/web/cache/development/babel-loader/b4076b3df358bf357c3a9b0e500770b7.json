{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx\";\nimport { Formik } from \"formik\";\nimport React from \"react\";\nimport { Button } from \"react-native-paper\";\nimport { useRegisterMutation } from \"../generated-components/apolloComponents\";\nimport { Wrapper, StyledColumnView } from \"../styled-components/ReusedUI\";\nimport { MyTextField } from \"../functional-components/MyTextField\";\nimport { RegisterValidationSchema } from \"../utils/FormValidationSchemas\";\nexport var RegisterView = function RegisterView(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 2),\n      registerUser = _useRegisterMutation2[0],\n      _useRegisterMutation3 = _useRegisterMutation2[1],\n      loading = _useRegisterMutation3.loading,\n      error = _useRegisterMutation3.error;\n\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n\n  function submitRegisterUser(data) {\n    var response;\n    return _regeneratorRuntime.async(function submitRegisterUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(registerUser({\n              variables: {\n                data: data\n              }\n            }));\n\n          case 3:\n            response = _context.sent;\n            console.log(response);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n            navigation.navigate(\"Login\");\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }\n\n  return React.createElement(Formik, {\n    initialValues: {\n      username: \"\",\n      password: \"\",\n      email: \"\"\n    },\n    onSubmit: function onSubmit(values) {\n      submitRegisterUser(values);\n    },\n    validationSchema: RegisterValidationSchema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit;\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, React.createElement(StyledColumnView, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }, React.createElement(MyTextField, {\n      label: \"Username\",\n      name: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }), React.createElement(MyTextField, {\n      label: \"Email\",\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }), React.createElement(MyTextField, {\n      label: \"Password\",\n      name: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    })), React.createElement(Button, {\n      onPress: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, \"REGISTER\"));\n  });\n};","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx"],"names":["Formik","React","Button","useRegisterMutation","Wrapper","StyledColumnView","MyTextField","RegisterValidationSchema","RegisterView","navigation","registerUser","loading","error","submitRegisterUser","data","variables","response","console","log","navigate","username","password","email","values","handleSubmit"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAEEC,mBAFF;AAIA,SAASC,OAAT,EAAkBC,gBAAlB;AAEA,SAASC,WAAT;AACA,SAASC,wBAAT;AAIA,OAAO,IAAMC,YAAgD,GAAG,SAAnDA,YAAmD,OAE1D;AAAA,MADJC,UACI,QADJA,UACI;;AAAA,6BACuCN,mBAAmB,EAD1D;AAAA;AAAA,MACGO,YADH;AAAA;AAAA,MACmBC,OADnB,yBACmBA,OADnB;AAAA,MAC4BC,KAD5B,yBAC4BA,KAD5B;;AAEJ,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;;AAEX,WAAeC,kBAAf,CAAkCC,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAE2BJ,YAAY,CAAC;AAClCK,cAAAA,SAAS,EAAE;AACTD,gBAAAA,IAAI,EAAJA;AADS;AADuB,aAAD,CAFvC;;AAAA;AAEUE,YAAAA,QAFV;AAOIC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAPJ;AAAA;;AAAA;AAAA;AAAA;AAUIC,YAAAA,OAAO,CAACC,GAAR;;AAVJ;AAYET,YAAAA,UAAU,CAACU,QAAX,CAAoB,OAApB;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,QAAQ,EAAE,EAA1B;AAA8BC,MAAAA,KAAK,EAAE;AAArC,KADjB;AAEE,IAAA,QAAQ,EAAE,kBAACC,MAAD,EAAY;AACpBV,MAAAA,kBAAkB,CAACU,MAAD,CAAlB;AACD,KAJH;AAKE,IAAA,gBAAgB,EAAEhB,wBALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG;AAAA,QAAGiB,YAAH,SAAGA,YAAH;AAAA,WACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAC,UAAnB;AAA8B,MAAA,IAAI,EAAC,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAC,UAAnB;AAA8B,MAAA,IAAI,EAAC,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF,EAOE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEA,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,CADD;AAAA,GANH,CADF;AAoBD,CA1CM","sourcesContent":["import { Formik } from \"formik\";\nimport React from \"react\";\nimport { Button } from \"react-native-paper\";\nimport {\n  RegisterInput,\n  useRegisterMutation,\n} from \"../generated-components/apolloComponents\";\nimport { Wrapper, StyledColumnView } from \"../styled-components/ReusedUI\";\nimport { AuthNavProps } from \"../navigation/auth/AuthParamList\";\nimport { MyTextField } from \"../functional-components/MyTextField\";\nimport { RegisterValidationSchema } from \"../utils/FormValidationSchemas\";\n\ninterface RegisterViewProps {}\n\nexport const RegisterView: React.FC<AuthNavProps<\"Register\">> = ({\n  navigation,\n}) => {\n  const [registerUser, { loading, error }] = useRegisterMutation();\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  async function submitRegisterUser(data: RegisterInput) {\n    try {\n      const response = await registerUser({\n        variables: {\n          data,\n        },\n      });\n      console.log(response);\n    } catch (err) {\n      // TODO  handle server errors at top level\n      console.log(err);\n    }\n    navigation.navigate(\"Login\");\n  }\n\n  return (\n    <Formik\n      initialValues={{ username: \"\", password: \"\", email: \"\" }}\n      onSubmit={(values) => {\n        submitRegisterUser(values);\n      }}\n      validationSchema={RegisterValidationSchema}>\n      {({ handleSubmit }) => (\n        <Wrapper>\n          <StyledColumnView>\n            <MyTextField label=\"Username\" name=\"username\" />\n            <MyTextField label=\"Email\" name=\"email\" />\n            <MyTextField label=\"Password\" name=\"password\" />\n          </StyledColumnView>\n\n          <Button onPress={handleSubmit as any}>REGISTER</Button>\n        </Wrapper>\n      )}\n    </Formik>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}