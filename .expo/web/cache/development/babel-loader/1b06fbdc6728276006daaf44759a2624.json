{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/generated/apolloComponents.tsx\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n    mutation Register($data: RegisterInput!) {\\n  register(data: $data) {\\n    id\\n    username\\n    email\\n  }\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n    mutation Login($email: String!, $password: String!) {\\n  login(email: $email, password: $password) {\\n    id\\n    username\\n    email\\n  }\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport var LoginDocument = gql(_templateObject());\nexport var LoginComponent = function LoginComponent(props) {\n  return React.createElement(ApolloReactComponents.Mutation, _extends({\n    mutation: LoginDocument\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }));\n};\nexport function withLogin(operationOptions) {\n  return ApolloReactHoc.withMutation(LoginDocument, _objectSpread({\n    alias: 'login'\n  }, operationOptions));\n}\n;\nexport var RegisterDocument = gql(_templateObject2());\nexport var RegisterComponent = function RegisterComponent(props) {\n  return React.createElement(ApolloReactComponents.Mutation, _extends({\n    mutation: RegisterDocument\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }));\n};\nexport function withRegister(operationOptions) {\n  return ApolloReactHoc.withMutation(RegisterDocument, _objectSpread({\n    alias: 'register'\n  }, operationOptions));\n}\n;","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/generated/apolloComponents.tsx"],"names":["gql","React","ApolloReactComponents","ApolloReactHoc","LoginDocument","LoginComponent","props","withLogin","operationOptions","withMutation","alias","RegisterDocument","RegisterComponent","withRegister"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,qBAAZ,MAAuC,0BAAvC;AACA,OAAO,KAAKC,cAAZ,MAAgC,mBAAhC;AA8EA,OAAO,IAAMC,aAAa,GAAGJ,GAAH,mBAAnB;AAYH,OAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;AAAA,SAC5B,oBAAC,qBAAD,CAAuB,QAAvB;AAAuE,IAAA,QAAQ,EAAEF;AAAjF,KAAoGE,KAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD4B;AAAA,CAAvB;AAOX,OAAO,SAASC,SAAT,CAAkFC,gBAAlF,EAIgC;AACnC,SAAOL,cAAc,CAACM,YAAf,CAA+GL,aAA/G;AACLM,IAAAA,KAAK,EAAE;AADF,KAEFF,gBAFE,EAAP;AAIH;AAAA;AAGD,OAAO,IAAMG,gBAAgB,GAAGX,GAAH,oBAAtB;AAYH,OAAO,IAAMY,iBAAiB,GAAG,SAApBA,iBAAoB,CAACN,KAAD;AAAA,SAC/B,oBAAC,qBAAD,CAAuB,QAAvB;AAA6E,IAAA,QAAQ,EAAEK;AAAvF,KAA6GL,KAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD+B;AAAA,CAA1B;AAOX,OAAO,SAASO,YAAT,CAAqFL,gBAArF,EAImC;AACtC,SAAOL,cAAc,CAACM,YAAf,CAAwHE,gBAAxH;AACLD,IAAAA,KAAK,EAAE;AADF,KAEFF,gBAFE,EAAP;AAIH;AAAA","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  hello: Scalars['String'];\n  getCurrentUser?: Maybe<User>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  register: User;\n  login?: Maybe<User>;\n};\n\n\nexport type MutationRegisterArgs = {\n  data: RegisterInput;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type RegisterInput = {\n  username: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username' | 'email'>\n  )> }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  data: RegisterInput;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username' | 'email'>\n  ) }\n);\n\n\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    id\n    username\n    email\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\nexport type LoginComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<LoginMutation, LoginMutationVariables>, 'mutation'>;\n\n    export const LoginComponent = (props: LoginComponentProps) => (\n      <ApolloReactComponents.Mutation<LoginMutation, LoginMutationVariables> mutation={LoginDocument} {...props} />\n    );\n    \nexport type LoginProps<TChildProps = {}, TDataName extends string = 'mutate'> = {\n      [key in TDataName]: ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>\n    } & TChildProps;\nexport function withLogin<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  LoginMutation,\n  LoginMutationVariables,\n  LoginProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withMutation<TProps, LoginMutation, LoginMutationVariables, LoginProps<TChildProps, TDataName>>(LoginDocument, {\n      alias: 'login',\n      ...operationOptions\n    });\n};\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($data: RegisterInput!) {\n  register(data: $data) {\n    id\n    username\n    email\n  }\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\nexport type RegisterComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RegisterMutation, RegisterMutationVariables>, 'mutation'>;\n\n    export const RegisterComponent = (props: RegisterComponentProps) => (\n      <ApolloReactComponents.Mutation<RegisterMutation, RegisterMutationVariables> mutation={RegisterDocument} {...props} />\n    );\n    \nexport type RegisterProps<TChildProps = {}, TDataName extends string = 'mutate'> = {\n      [key in TDataName]: ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>\n    } & TChildProps;\nexport function withRegister<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  RegisterMutation,\n  RegisterMutationVariables,\n  RegisterProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withMutation<TProps, RegisterMutation, RegisterMutationVariables, RegisterProps<TChildProps, TDataName>>(RegisterDocument, {\n      alias: 'register',\n      ...operationOptions\n    });\n};\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;"]},"metadata":{},"sourceType":"module"}