{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/generated/apolloComponents.tsx\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteralLoose([\"\\n    mutation Register($data: RegisterInput!) {\\n  register(data: $data)\\n}\\n    \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteralLoose([\"\\n    mutation Login($email: String!, $password: String!) {\\n  login(email: $email, password: $password) {\\n    id\\n    username\\n    email\\n  }\\n}\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n    query GetPosts {\\n  getPosts {\\n    text\\n    link\\n    timeSubmitted\\n    id\\n    user {\\n      username\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n    mutation CreatePost($text: String!, $link: String!) {\\n  createPost(text: $text, link: $link)\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport var CreatePostDocument = gql(_templateObject());\nexport var CreatePostComponent = function CreatePostComponent(props) {\n  return React.createElement(ApolloReactComponents.Mutation, _extends({\n    mutation: CreatePostDocument\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }));\n};\nexport function useCreatePostMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(CreatePostDocument, baseOptions);\n}\nexport var GetPostsDocument = gql(_templateObject2());\nexport var GetPostsComponent = function GetPostsComponent(props) {\n  return React.createElement(ApolloReactComponents.Query, _extends({\n    query: GetPostsDocument\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }\n  }));\n};\nexport function useGetPostsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(GetPostsDocument, baseOptions);\n}\nexport function useGetPostsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(GetPostsDocument, baseOptions);\n}\nexport var LoginDocument = gql(_templateObject3());\nexport var LoginComponent = function LoginComponent(props) {\n  return React.createElement(ApolloReactComponents.Mutation, _extends({\n    mutation: LoginDocument\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }\n  }));\n};\nexport function useLoginMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LoginDocument, baseOptions);\n}\nexport var RegisterDocument = gql(_templateObject4());\nexport var RegisterComponent = function RegisterComponent(props) {\n  return React.createElement(ApolloReactComponents.Mutation, _extends({\n    mutation: RegisterDocument\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }\n  }));\n};\nexport function useRegisterMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(RegisterDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/generated/apolloComponents.tsx"],"names":["gql","React","ApolloReactComponents","ApolloReactHooks","CreatePostDocument","CreatePostComponent","props","useCreatePostMutation","baseOptions","useMutation","GetPostsDocument","GetPostsComponent","useGetPostsQuery","useQuery","useGetPostsLazyQuery","useLazyQuery","LoginDocument","LoginComponent","useLoginMutation","RegisterDocument","RegisterComponent","useRegisterMutation"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,qBAAZ,MAAuC,0BAAvC;AACA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AAgJA,OAAO,IAAMC,kBAAkB,GAAGJ,GAAH,mBAAxB;AAQH,OAAO,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD;AAAA,SACjC,oBAAC,qBAAD,CAAuB,QAAvB;AAAiF,IAAA,QAAQ,EAAEF;AAA3F,KAAmHE,KAAnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADiC;AAAA,CAA5B;AAuBX,OAAO,SAASC,qBAAT,CAA+BC,WAA/B,EAAoI;AACnI,SAAOL,gBAAgB,CAACM,WAAjB,CAA8EL,kBAA9E,EAAkGI,WAAlG,CAAP;AACD;AAIP,OAAO,IAAME,gBAAgB,GAAGV,GAAH,oBAAtB;AAeH,OAAO,IAAMW,iBAAiB,GAAG,SAApBA,iBAAoB,CAACL,KAAD;AAAA,SAC/B,oBAAC,qBAAD,CAAuB,KAAvB;AAAoE,IAAA,KAAK,EAAEI;AAA3E,KAAiGJ,KAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD+B;AAAA,CAA1B;AAoBX,OAAO,SAASM,gBAAT,CAA0BJ,WAA1B,EAAkH;AACjH,SAAOL,gBAAgB,CAACU,QAAjB,CAAiEH,gBAAjE,EAAmFF,WAAnF,CAAP;AACD;AACP,OAAO,SAASM,oBAAT,CAA8BN,WAA9B,EAA0H;AACvH,SAAOL,gBAAgB,CAACY,YAAjB,CAAqEL,gBAArE,EAAuFF,WAAvF,CAAP;AACD;AAIT,OAAO,IAAMQ,aAAa,GAAGhB,GAAH,oBAAnB;AAYH,OAAO,IAAMiB,cAAc,GAAG,SAAjBA,cAAiB,CAACX,KAAD;AAAA,SAC5B,oBAAC,qBAAD,CAAuB,QAAvB;AAAuE,IAAA,QAAQ,EAAEU;AAAjF,KAAoGV,KAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD4B;AAAA,CAAvB;AAuBX,OAAO,SAASY,gBAAT,CAA0BV,WAA1B,EAAqH;AACpH,SAAOL,gBAAgB,CAACM,WAAjB,CAAoEO,aAApE,EAAmFR,WAAnF,CAAP;AACD;AAIP,OAAO,IAAMW,gBAAgB,GAAGnB,GAAH,oBAAtB;AAQH,OAAO,IAAMoB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACd,KAAD;AAAA,SAC/B,oBAAC,qBAAD,CAAuB,QAAvB;AAA6E,IAAA,QAAQ,EAAEa;AAAvF,KAA6Gb,KAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD+B;AAAA,CAA1B;AAsBX,OAAO,SAASe,mBAAT,CAA6Bb,WAA7B,EAA8H;AAC7H,SAAOL,gBAAgB,CAACM,WAAjB,CAA0EU,gBAA1E,EAA4FX,WAA5F,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getCurrentUser?: Maybe<User>;\n  hello: Scalars['String'];\n  getPosts: Array<Post>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['ID'];\n  text: Scalars['String'];\n  link?: Maybe<Scalars['String']>;\n  timeSubmitted: Scalars['DateTime'];\n  user: User;\n};\n\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  changePassword?: Maybe<User>;\n  confirmUser: Scalars['Boolean'];\n  forgotPassword: Scalars['Boolean'];\n  login?: Maybe<User>;\n  logout: Scalars['Boolean'];\n  register: Scalars['Boolean'];\n  createPost: Scalars['Boolean'];\n};\n\n\nexport type MutationChangePasswordArgs = {\n  data: ChangePassowrdInput;\n};\n\n\nexport type MutationConfirmUserArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  data: RegisterInput;\n};\n\n\nexport type MutationCreatePostArgs = {\n  link: Scalars['String'];\n  text: Scalars['String'];\n};\n\nexport type ChangePassowrdInput = {\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\nexport type RegisterInput = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type CreatePostMutationVariables = Exact<{\n  text: Scalars['String'];\n  link: Scalars['String'];\n}>;\n\n\nexport type CreatePostMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createPost'>\n);\n\nexport type GetPostsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPostsQuery = (\n  { __typename?: 'Query' }\n  & { getPosts: Array<(\n    { __typename?: 'Post' }\n    & Pick<Post, 'text' | 'link' | 'timeSubmitted' | 'id'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'username'>\n    ) }\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username' | 'email'>\n  )> }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  data: RegisterInput;\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\n\nexport const CreatePostDocument = gql`\n    mutation CreatePost($text: String!, $link: String!) {\n  createPost(text: $text, link: $link)\n}\n    `;\nexport type CreatePostMutationFn = ApolloReactCommon.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\nexport type CreatePostComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreatePostMutation, CreatePostMutationVariables>, 'mutation'>;\n\n    export const CreatePostComponent = (props: CreatePostComponentProps) => (\n      <ApolloReactComponents.Mutation<CreatePostMutation, CreatePostMutationVariables> mutation={CreatePostDocument} {...props} />\n    );\n    \n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      text: // value for 'text'\n *      link: // value for 'link'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, baseOptions);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = ApolloReactCommon.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = ApolloReactCommon.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const GetPostsDocument = gql`\n    query GetPosts {\n  getPosts {\n    text\n    link\n    timeSubmitted\n    id\n    user {\n      username\n    }\n  }\n}\n    `;\nexport type GetPostsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetPostsQuery, GetPostsQueryVariables>, 'query'>;\n\n    export const GetPostsComponent = (props: GetPostsComponentProps) => (\n      <ApolloReactComponents.Query<GetPostsQuery, GetPostsQueryVariables> query={GetPostsDocument} {...props} />\n    );\n    \n\n/**\n * __useGetPostsQuery__\n *\n * To run a query within a React component, call `useGetPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPostsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPostsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPostsQuery, GetPostsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetPostsQuery, GetPostsQueryVariables>(GetPostsDocument, baseOptions);\n      }\nexport function useGetPostsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPostsQuery, GetPostsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetPostsQuery, GetPostsQueryVariables>(GetPostsDocument, baseOptions);\n        }\nexport type GetPostsQueryHookResult = ReturnType<typeof useGetPostsQuery>;\nexport type GetPostsLazyQueryHookResult = ReturnType<typeof useGetPostsLazyQuery>;\nexport type GetPostsQueryResult = ApolloReactCommon.QueryResult<GetPostsQuery, GetPostsQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    id\n    username\n    email\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\nexport type LoginComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<LoginMutation, LoginMutationVariables>, 'mutation'>;\n\n    export const LoginComponent = (props: LoginComponentProps) => (\n      <ApolloReactComponents.Mutation<LoginMutation, LoginMutationVariables> mutation={LoginDocument} {...props} />\n    );\n    \n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($data: RegisterInput!) {\n  register(data: $data)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\nexport type RegisterComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RegisterMutation, RegisterMutationVariables>, 'mutation'>;\n\n    export const RegisterComponent = (props: RegisterComponentProps) => (\n      <ApolloReactComponents.Mutation<RegisterMutation, RegisterMutationVariables> mutation={RegisterDocument} {...props} />\n    );\n    \n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;"]},"metadata":{},"sourceType":"module"}