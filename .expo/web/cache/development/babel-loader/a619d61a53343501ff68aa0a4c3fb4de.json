{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  type Mutation {\\n    register(data: RegisterInput!): User!\\n    login(password: String!, email: String!): User\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from \"apollo-boost\";\nimport React from \"react\";\nimport { Wrapper } from \"../global-ui/ReusedUI\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Button } from \"react-native-paper\";\nimport { RegisterComponent } from \"../generated/apolloComponents\";\nvar LOGIN = gql(_templateObject());\nexport var RegisterView = function RegisterView(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  console.log(\"expo\");\n  return React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, React.createElement(RegisterComponent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, function (register) {\n    return React.createElement(Button, {\n      onPress: function _callee() {\n        var response;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(register({\n                  variables: {\n                    data: {\n                      password: \"hi\",\n                      username: \"newUser\",\n                      email: \"hh@ghh.com\"\n                    }\n                  }\n                }));\n\n              case 2:\n                response = _context.sent;\n\n                if (response && response.data) {\n                  console.log(\"it worked\");\n                }\n\n                console.log(\"did it work?\");\n                console.log(response);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, \"call login mutation\"));\n  }));\n};","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx"],"names":["gql","React","Wrapper","Button","RegisterComponent","LOGIN","RegisterView","navigation","route","console","log","register","variables","data","password","username","email","response"],"mappings":";;;;;;;;;;;;;;AACA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SAASC,OAAT;;AAEA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAEEC,iBAFF;AAOA,IAAMC,KAAK,GAAGL,GAAH,mBAAX;AAOA,OAAO,IAAMM,YAAgD,GAAG,SAAnDA,YAAmD,OAG1D;AAAA,MAFJC,UAEI,QAFJA,UAEI;AAAA,MADJC,KACI,QADJA,KACI;AAKJC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEA,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,UAACC,QAAD;AAAA,WACC,oBAAC,MAAD;AACE,MAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDACgBA,QAAQ,CAAC;AAC9BC,kBAAAA,SAAS,EAAE;AACTC,oBAAAA,IAAI,EAAE;AACJC,sBAAAA,QAAQ,EAAE,IADN;AAEJC,sBAAAA,QAAQ,EAAE,SAFN;AAGJC,sBAAAA,KAAK,EAAE;AAHH;AADG;AADmB,iBAAD,CADxB;;AAAA;AACDC,gBAAAA,QADC;;AAUP,oBAAIA,QAAQ,IAAIA,QAAQ,CAACJ,IAAzB,EAA+B;AAC7BJ,kBAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;;AACDD,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ;;AAdO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAiBE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAjBF,CADD;AAAA,GADH,CADF,CADF;AAuDD,CAjEM","sourcesContent":["import { useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport React from \"react\";\nimport { AuthNavProps } from \"../navigation/auth/AuthParamList\";\nimport { Mutation } from \"react-apollo\";\nimport { Wrapper } from \"../global-ui/ReusedUI\";\nimport { Text } from \"react-native\";\nimport { Button } from \"react-native-paper\";\nimport {\n  LoginComponent,\n  RegisterComponent,\n} from \"../generated/apolloComponents\";\n\ninterface RegisterViewProps {}\n\nconst LOGIN = gql`\n  type Mutation {\n    register(data: RegisterInput!): User!\n    login(password: String!, email: String!): User\n  }\n`;\n\nexport const RegisterView: React.FC<AuthNavProps<\"Register\">> = ({\n  navigation,\n  route,\n}) => {\n  // if (loading) return <Text>Loading...</Text>;\n  // if (error) return <Text>Error</Text>;\n\n  // const [login2] = useMutation(LOGIN);\n  console.log(\"expo\");\n\n  return (\n    <Wrapper>\n      <RegisterComponent>\n        {(register) => (\n          <Button\n            onPress={async () => {\n              const response = await register({\n                variables: {\n                  data: {\n                    password: \"hi\",\n                    username: \"newUser\",\n                    email: \"hh@ghh.com\",\n                  },\n                },\n              });\n              if (response && response.data) {\n                console.log(\"it worked\");\n              }\n              console.log(\"did it work?\");\n              console.log(response);\n            }}>\n            <Text>call login mutation</Text>\n          </Button>\n        )}\n      </RegisterComponent>\n    </Wrapper>\n\n    // <Wrapper>\n\n    //   <Button\n    //     onPress={() =>\n    //       login2({\n    //         variables: { email: \"mail20@mail.com\", password: \"hey\" },\n    //       })\n    //     }>\n    //     Test Me\n    //   </Button>\n    //   {/* <Text>{data.username}</Text> */}\n    //   <StyledColumnView>\n    //     <TextInput label=\"Username\" mode=\"outlined\" />\n    //     <TextInput label=\"Email\" mode=\"outlined\" />\n    //     <TextInput label=\"Password\" mode=\"outlined\" />\n    //     <TextInput label=\"Re-enter Password\" mode=\"outlined\" />\n    //     <LineBreak />\n    //     <Button\n    //       mode=\"contained\"\n    //       onPress={() => {\n    //         navigation.navigate(\"Login\");\n    //         //login({ variables: { email: \"mail20@mail.com\", password: \"hey\" } })\n    //       }}>\n    //       SIGN UP\n    //     </Button>\n    //   </StyledColumnView>\n    // </Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}