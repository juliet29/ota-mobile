{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/InputField.tsx\";\nimport { useField, ErrorMessage } from \"formik\";\nimport React from \"react\";\nimport { TextInput, HelperText } from \"react-native-paper\";\nimport * as yup from \"yup\";\nimport View from \"react-native-web/dist/exports/View\";\nexport var InputField = function InputField(_ref) {\n  var field = _ref.field,\n      props = _objectWithoutProperties(_ref, [\"field\"]);\n\n  return React.createElement(TextInput, _extends({}, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 10\n    }\n  }));\n};\nexport var MyTextField = function MyTextField(_ref2) {\n  var errName = _ref2.errName,\n      label = _ref2.label,\n      props = _objectWithoutProperties(_ref2, [\"errName\", \"label\"]);\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, React.createElement(TextInput, _extends({\n    label: label\n  }, field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  })), React.createElement(HelperText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, React.createElement(ErrorMessage, {\n    name: errName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  })));\n};\nexport var validationSchema = yup.object({\n  firstName: yup.string().required().min(2)\n});","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/InputField.tsx"],"names":["useField","ErrorMessage","React","TextInput","HelperText","yup","InputField","field","props","MyTextField","errName","label","meta","validationSchema","object","firstName","string","required","min"],"mappings":";;;;AAAA,SAAsCA,QAAtC,EAAgDC,YAAhD,QAAoE,QAApE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,oBAAtC;AAEA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;AASA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAqC;AAAA,MAAlCC,KAAkC,QAAlCA,KAAkC;AAAA,MAAxBC,KAAwB;;AAC7D,SAAO,oBAAC,SAAD,eAAeD,KAAf,EAA0BC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAFM;AAIP,OAAO,IAAMC,WAAgD,GAAG,SAAnDA,WAAmD,QAI1D;AAAA,MAHJC,OAGI,SAHJA,OAGI;AAAA,MAFJC,KAEI,SAFJA,KAEI;AAAA,MADDH,KACC;;AAAA,kBACkBR,QAAQ,CAACQ,KAAD,CAD1B;AAAA;AAAA,MACGD,KADH;AAAA,MACUK,IADV;;AAGJ,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAED;AAAlB,KAA8BJ,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAEG,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAQD,CAfM;AAiBP,OAAO,IAAMG,gBAAgB,GAAGR,GAAG,CAACS,MAAJ,CAAW;AACzCC,EAAAA,SAAS,EAAEV,GAAG,CAACW,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B;AAD8B,CAAX,CAAzB","sourcesContent":["import { FieldProps, FieldAttributes, useField, ErrorMessage } from \"formik\";\nimport React from \"react\";\nimport { TextInput, HelperText } from \"react-native-paper\";\n\nimport * as yup from \"yup\";\nimport { View } from \"react-native\";\n\ninterface InputFieldProps {}\n\n// export const InputField: React.FC<InputFieldProps> = ({}) => {\n//         return ();\n// }\n\nexport const InputField = ({ field, ...props }: FieldProps) => {\n  return <TextInput {...field} {...props} />;\n};\n\nexport const MyTextField: React.FC<FieldAttributes<{}> & any> = ({\n  errName,\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  //   const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return (\n    <View>\n      <TextInput label={label} {...(field as any)} />\n      <HelperText>\n        <ErrorMessage name={errName} />\n      </HelperText>\n    </View>\n  );\n};\n\nexport const validationSchema = yup.object({\n  firstName: yup.string().required().min(2),\n});\n"]},"metadata":{},"sourceType":"module"}