{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx\";\nimport React from \"react\";\nimport { Button, TextInput } from \"react-native-paper\";\nimport { LineBreak, StyledColumnView, Wrapper } from \"../global-ui/ReusedUI\";\nimport { useRegisterMutation } from \"../generated/apolloComponents\";\nimport { Formik } from \"Formik\";\nexport var RegisterView = function RegisterView(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 2),\n      registerUser = _useRegisterMutation2[0],\n      _useRegisterMutation3 = _useRegisterMutation2[1],\n      loading = _useRegisterMutation3.loading,\n      error = _useRegisterMutation3.error;\n\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n\n  function submitRegisterUser(formData) {\n    var res;\n    return _regeneratorRuntime.async(function submitRegisterUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(registerUser({\n              variables: {\n                data: {\n                  email: formData.email,\n                  username: \"xcfvgbhjnkmfghjk\",\n                  password: \"dfghjklcvbnm,\"\n                }\n              }\n            }));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 9:\n            _context.prev = 9;\n            console.log(\"Success\");\n            return _context.finish(9);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6, 9, 12]], Promise);\n  }\n\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\"\n    },\n    onSubmit: function onSubmit(values) {\n      return submitRegisterUser(values);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        values = _ref2.values;\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, React.createElement(StyledColumnView, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      placeholder: \"email\",\n      onChangeText: handleChange(\"email\"),\n      onBlur: handleBlur(\"email\"),\n      value: values.email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    })), React.createElement(LineBreak, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }), React.createElement(Button, {\n      onPress: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, \"Submit\"));\n  });\n};","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx"],"names":["React","Button","TextInput","LineBreak","StyledColumnView","Wrapper","useRegisterMutation","Formik","RegisterView","navigation","route","registerUser","loading","error","submitRegisterUser","formData","variables","data","email","username","password","res","console","log","values","handleChange","handleBlur","handleSubmit"],"mappings":";;;AACA,OAAOA,KAAP,MAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,oBAAlC;AACA,SAASC,SAAT,EAAoBC,gBAApB,EAAsCC,OAAtC;AAEA,SACEC,mBADF;AAOA,SAASC,MAAT,QAAuB,QAAvB;AAKA,OAAO,IAAMC,YAAgD,GAAG,SAAnDA,YAAmD,OAG1D;AAAA,MAFJC,UAEI,QAFJA,UAEI;AAAA,MADJC,KACI,QADJA,KACI;;AAAA,6BAEuCJ,mBAAmB,EAF1D;AAAA;AAAA,MAEGK,YAFH;AAAA;AAAA,MAEmBC,OAFnB,yBAEmBA,OAFnB;AAAA,MAE4BC,KAF5B,yBAE4BA,KAF5B;;AAGJ,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;;AAEX,WAAeC,kBAAf,CAAkCC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEsBJ,YAAY,CAAC;AAC7BK,cAAAA,SAAS,EAAE;AACTC,gBAAAA,IAAI,EAAE;AAGJC,kBAAAA,KAAK,EAAEH,QAAQ,CAACG,KAHZ;AAIJC,kBAAAA,QAAQ,EAAE,kBAJN;AAKJC,kBAAAA,QAAQ,EAAE;AALN;AADG;AADkB,aAAD,CAFlC;;AAAA;AAEUC,YAAAA,GAFV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcIC,YAAAA,OAAO,CAACC,GAAR;;AAdJ;AAAA;AAgBID,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAhBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEL,MAAAA,KAAK,EAAE;AAAT,KADjB;AAEE,IAAA,QAAQ,EAAE,kBAACM,MAAD;AAAA,aAAYV,kBAAkB,CAACU,MAAD,CAA9B;AAAA,KAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGG;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,QAAiBC,UAAjB,SAAiBA,UAAjB;AAAA,QAA6BC,YAA7B,SAA6BA,YAA7B;AAAA,QAA2CH,MAA3C,SAA2CA,MAA3C;AAAA,WACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,WAAW,EAAC,OADd;AAEE,MAAA,YAAY,EAAEC,YAAY,CAAC,OAAD,CAF5B;AAGE,MAAA,MAAM,EAAEC,UAAU,CAAC,OAAD,CAHpB;AAIE,MAAA,KAAK,EAAEF,MAAM,CAACN,KAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EASE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAWE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAES,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF,CADD;AAAA,GAHH,CADF;AAqBD,CAlDM","sourcesContent":["import { gql } from \"apollo-boost\";\nimport React, { useEffect } from \"react\";\nimport { Button, TextInput } from \"react-native-paper\";\nimport { LineBreak, StyledColumnView, Wrapper } from \"../global-ui/ReusedUI\";\nimport { AuthNavProps } from \"../navigation/auth/AuthParamList\";\nimport {\n  useRegisterMutation,\n  RegisterInput,\n} from \"../generated/apolloComponents\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation, RenderPromises } from \"@apollo/react-hooks\";\nimport { REGISTER } from \"../graphql/user/mutations/register\";\nimport { Formik } from \"Formik\";\nimport { ValuesOfCorrectTypeRule } from \"graphql\";\n\ninterface RegisterViewProps {}\n\nexport const RegisterView: React.FC<AuthNavProps<\"Register\">> = ({\n  navigation,\n  route,\n}) => {\n  // register mutation\n  const [registerUser, { loading, error }] = useRegisterMutation();\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  async function submitRegisterUser(formData: any) {\n    try {\n      const res = await registerUser({\n        variables: {\n          data: {\n            // username: formData.username,\n            // password: formData.password,\n            email: formData.email,\n            username: \"xcfvgbhjnkmfghjk\",\n            password: \"dfghjklcvbnm,\",\n          },\n        },\n      });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      console.log(\"Success\");\n    }\n  }\n\n  return (\n    <Formik\n      initialValues={{ email: \"\" }}\n      onSubmit={(values) => submitRegisterUser(values)}>\n      {({ handleChange, handleBlur, handleSubmit, values }) => (\n        <Wrapper>\n          <StyledColumnView>\n            <TextInput\n              placeholder=\"email\"\n              onChangeText={handleChange(\"email\")}\n              onBlur={handleBlur(\"email\")}\n              value={values.email}\n            />\n          </StyledColumnView>\n          <LineBreak />\n\n          <Button onPress={handleSubmit as any}>Submit</Button>\n        </Wrapper>\n      )}\n    </Formik>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}