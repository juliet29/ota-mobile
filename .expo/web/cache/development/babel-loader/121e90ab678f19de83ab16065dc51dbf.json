{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx\";\nimport React from \"react\";\nimport { Button } from \"react-native-paper\";\nimport { Wrapper } from \"../global-ui/ReusedUI\";\nimport { useRegisterMutation } from \"../generated/apolloComponents\";\nexport var RegisterView = function RegisterView(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 2),\n      registerUser = _useRegisterMutation2[0],\n      _useRegisterMutation3 = _useRegisterMutation2[1],\n      loading = _useRegisterMutation3.loading,\n      error = _useRegisterMutation3.error;\n\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  var testVar = {\n    variables: {\n      data: {\n        username: \"hiwasgood\",\n        password: \"passs\",\n        email: \"fake@email.com\"\n      }\n    }\n  };\n  return React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    onPress: function onPress() {\n      registerUser(testVar);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"TEST\"));\n};","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/modules/RegisterView.tsx"],"names":["React","Button","Wrapper","useRegisterMutation","RegisterView","navigation","route","registerUser","loading","error","testVar","variables","data","username","password","email"],"mappings":";;AACA,OAAOA,KAAP,MAAiC,OAAjC;AACA,SAASC,MAAT,QAAkC,oBAAlC;AACA,SAAsCC,OAAtC;AAEA,SACEC,mBADF;AAQA,OAAO,IAAMC,YAAgD,GAAG,SAAnDA,YAAmD,OAG1D;AAAA,MAFJC,UAEI,QAFJA,UAEI;AAAA,MADJC,KACI,QADJA,KACI;;AAAA,6BAKuCH,mBAAmB,EAL1D;AAAA;AAAA,MAKGI,YALH;AAAA;AAAA,MAKmBC,OALnB,yBAKmBA,OALnB;AAAA,MAK4BC,KAL5B,yBAK4BA,KAL5B;;AAMJ,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAyBX,MAAMC,OAAO,GAAG;AACdC,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE,WADN;AAEJC,QAAAA,QAAQ,EAAE,OAFN;AAGJC,QAAAA,KAAK,EAAE;AAHH;AADG;AADG,GAAhB;AAUA,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAE,mBAAM;AACbR,MAAAA,YAAY,CAACG,OAAD,CAAZ;AACD,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAoCD,CAjFM","sourcesContent":["import { gql } from \"apollo-boost\";\nimport React, { useEffect } from \"react\";\nimport { Button, TextInput } from \"react-native-paper\";\nimport { LineBreak, StyledColumnView, Wrapper } from \"../global-ui/ReusedUI\";\nimport { AuthNavProps } from \"../navigation/auth/AuthParamList\";\nimport {\n  useRegisterMutation,\n  RegisterInput,\n} from \"../generated/apolloComponents\";\nimport { useForm } from \"react-hook-form\";\n\ninterface RegisterViewProps {}\n\nexport const RegisterView: React.FC<AuthNavProps<\"Register\">> = ({\n  navigation,\n  route,\n}) => {\n  // form stuff\n  // const { register, setValue, handleSubmit, errors } = useForm();\n\n  // register mutation\n  const [registerUser, { loading, error }] = useRegisterMutation();\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  // TODO define what happens on submit\n  // const onSubmit = (formData: any) => {\n  //   console.log(\"submitted!\");\n  //   // registerUser({\n  //   //   variables: {\n  //   //     data: {\n  //   //       username: formData.username,\n  //   //       password: formData.password,\n  //   //       email: formData.email,\n  //   //     },\n  //   //   },\n  //   // });\n  //   // actually log in so can get a cookie :)\n  //   // navigation.navigate(\"Login\");\n  // };\n\n  // how the form updates + validation\n  // useEffect(() => {\n  //   register({ name: \"username\" });\n  //   register({ name: \"email\" });\n  //   register({ name: \"password\" });\n  //   register({ name: \"passwordConfirm\" });\n  // }, [register]);\n  const testVar = {\n    variables: {\n      data: {\n        username: \"hiwasgood\",\n        password: \"passs\",\n        email: \"fake@email.com\",\n      },\n    },\n  };\n\n  return (\n    <Wrapper>\n      <Button\n        onPress={() => {\n          registerUser(testVar);\n        }}>\n        TEST\n      </Button>\n      {/* <StyledColumnView>\n        <TextInput\n          label=\"Username\"\n          mode=\"outlined\"\n          onChangeText={(text) => setValue(\"username\", text)}\n        />\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          onChangeText={(text) => setValue(\"email\", text)}\n        />\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          onChangeText={(text) => setValue(\"password\", text)}\n        />\n        <TextInput\n          label=\"Confirm Password\"\n          mode=\"outlined\"\n          onChangeText={(text) => setValue(\"passwordConfirm\", text)}\n        />\n        <LineBreak />\n        <Button mode=\"contained\" onPress={handleSubmit(onSubmit)}>\n          SIGN UP\n        </Button>\n      </StyledColumnView> */}\n    </Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}