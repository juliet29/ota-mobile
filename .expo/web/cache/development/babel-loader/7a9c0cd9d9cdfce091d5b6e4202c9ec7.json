{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/functional-components/SpotifyAuthButton.tsx\";\nimport { useAuthRequest, makeRedirectUri } from \"expo-auth-session\";\nimport { Button } from \"react-native-paper\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport React from \"react\";\nWebBrowser.maybeCompleteAuthSession();\nvar discovery = {\n  authorizationEndpoint: \"https://accounts.spotify.com/authorize\",\n  tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n};\nexport default function SpotifyAuthButton() {\n  var _useAuthRequest = useAuthRequest({\n    clientId: \"16ecb71937474d49bf1cd3c7d77a8850\",\n    scopes: [\"user-read-email\", \"playlist-modify-public\"],\n    usePKCE: false,\n    redirectUri: makeRedirectUri({\n      native: \"http://localhost:19006/\"\n    })\n  }, discovery),\n      _useAuthRequest2 = _slicedToArray(_useAuthRequest, 3),\n      request = _useAuthRequest2[0],\n      response = _useAuthRequest2[1],\n      promptAsync = _useAuthRequest2[2];\n\n  React.useEffect(function () {\n    if ((response == null ? void 0 : response.type) === \"success\") {\n      var code = response.params.code;\n    }\n  }, [response]);\n  return React.createElement(Button, {\n    mode: \"outlined\",\n    disabled: !request,\n    onPress: function onPress() {\n      promptAsync();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, \"SIGN IN WITH SPOTIFY\");\n}","map":{"version":3,"sources":["/Users/julietnu/Desktop/onTheAux/ota-mobile-v1/src/functional-components/SpotifyAuthButton.tsx"],"names":["useAuthRequest","makeRedirectUri","Button","WebBrowser","React","maybeCompleteAuthSession","discovery","authorizationEndpoint","tokenEndpoint","SpotifyAuthButton","clientId","scopes","usePKCE","redirectUri","native","request","response","promptAsync","useEffect","type","code","params"],"mappings":";;AAAA,SAASA,cAAT,EAAyBC,eAAzB,QAAgD,mBAAhD;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEAD,UAAU,CAACE,wBAAX;AAGA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,qBAAqB,EAAE,wCADP;AAEhBC,EAAAA,aAAa,EAAE;AAFC,CAAlB;AAKA,eAAe,SAASC,iBAAT,GAA6B;AAAA,wBACDT,cAAc,CACrD;AACEU,IAAAA,QAAQ,EAAE,kCADZ;AAEEC,IAAAA,MAAM,EAAE,CAAC,iBAAD,EAAoB,wBAApB,CAFV;AAKEC,IAAAA,OAAO,EAAE,KALX;AAOEC,IAAAA,WAAW,EAAEZ,eAAe,CAAC;AAE3Ba,MAAAA,MAAM,EAAE;AAFmB,KAAD;AAP9B,GADqD,EAarDR,SAbqD,CADb;AAAA;AAAA,MACnCS,OADmC;AAAA,MAC1BC,QAD0B;AAAA,MAChBC,WADgB;;AAiB1Cb,EAAAA,KAAK,CAACc,SAAN,CAAgB,YAAM;AACpB,QAAI,CAAAF,QAAQ,QAAR,YAAAA,QAAQ,CAAEG,IAAV,MAAmB,SAAvB,EAAkC;AAAA,UACxBC,IADwB,GACfJ,QAAQ,CAACK,MADM,CACxBD,IADwB;AAEjC;AACF,GAJD,EAIG,CAACJ,QAAD,CAJH;AAMA,SACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,QAAQ,EAAE,CAACD,OAFb;AAGE,IAAA,OAAO,EAAE,mBAAM;AACbE,MAAAA,WAAW;AACZ,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF;AAUD","sourcesContent":["import { useAuthRequest, makeRedirectUri } from \"expo-auth-session\";\nimport { Button } from \"react-native-paper\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport { SPOTIFY_ID } from \"../utils/Keys\";\nimport React from \"react\";\n\nWebBrowser.maybeCompleteAuthSession();\n\n// Endpoint\nconst discovery = {\n  authorizationEndpoint: \"https://accounts.spotify.com/authorize\",\n  tokenEndpoint: \"https://accounts.spotify.com/api/token\",\n};\n\nexport default function SpotifyAuthButton() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: \"16ecb71937474d49bf1cd3c7d77a8850\",\n      scopes: [\"user-read-email\", \"playlist-modify-public\"],\n      // In order to follow the \"Authorization Code Flow\" to fetch token after authorizationEndpoint\n      // this must be set to false\n      usePKCE: false,\n      // For usage in managed apps using the proxy\n      redirectUri: makeRedirectUri({\n        // For usage in bare and standalone\n        native: \"http://localhost:19006/\",\n      }),\n    },\n    discovery\n  );\n\n  React.useEffect(() => {\n    if (response?.type === \"success\") {\n      const { code } = response.params;\n    }\n  }, [response]);\n\n  return (\n    <Button\n      mode=\"outlined\"\n      disabled={!request}\n      onPress={() => {\n        promptAsync();\n      }}>\n      SIGN IN WITH SPOTIFY\n    </Button>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}